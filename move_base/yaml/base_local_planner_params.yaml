# TrajectoryPlannerROS:
#   #Set the acceleration limits of the robot
#   acc_lim_th: 1.0
#   acc_lim_x: 1.0
#   acc_lim_y: 0.0

#   #Set the velocity limits of the robot
#   max_vel_x: 0.65
#   min_vel_x: 0.1
#   max_rotational_vel: 1.0
#   min_in_place_rotational_vel: 0.4

#   #The velocity the robot will command when trying to escape from a stuck situation
#   escape_vel: -0.1

#   #For this example, we'll use a holonomic robot
#   holonomic_robot: false

#   #Set the tolerance on achieving a goal
#   xy_goal_tolerance: 0.1
#   yaw_goal_tolerance: 0.05

#   #We'll configure how long and with what granularity we'll forward simulate trajectories
#   sim_time: 1.7
#   sim_granularity: 0.025
#   vx_samples: 3
#   vtheta_samples: 20

#   #Parameters for scoring trajectories
#   goal_distance_bias: 0.4
#   path_distance_bias: 0.8
#   occdist_scale: 0.03
#   heading_lookahead: 0.5
#   # heding_scoring: true
#   meter_scoring: true
#   # pdist_scale: 0.6
#   # gdist_scale: 0.8

#   #We'll use the Dynamic Window Approach to control instead of Trajectory Rollout for this example
#   dwa: true

#   #How far the robot must travel before oscillation flags are reset
#   oscillation_reset_dist: 0.05

#   #Eat up the plan as the robot moves along it

# Plan 2
TrajectoryPlannerROS:
  max_vel_x: 1.0
  min_vel_x: 0.4
  max_vel_theta: 0.6
  min_in_place_vel_theta: 0.2

  acc_lim_theta: 1.57
  acc_lim_x: 1.5
  # acc_lim_y: 2.5

  holonomic_robot: false
  meter_scoring: true
  dwa: true
  path_distance_bias: 0.8
  goal_distance_bias: 0.6
  occdist_scale: 0.01
  heading_lookahead: 1.0
  heading_scoring: true
  global_frame_id : map
  prune_plan: true
  stop_time_buffer : 0.4
  forward_point_distance : 0.5